import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.cross_validation import cross_val_score
import itertools
from pprint import pprint
best_score = []
best_std = []
best_comb = []
nfeatures = 18
iterable = range(nfeatures)
for intercept in [True,False]:
 model = LogisticRegression(fit_intercept=intercept,penalty=penalty,dual=False,C=cval)
 for s in xrange(len(iterable)+1):
 for comb in itertools.combinations(iterable, s):
 if len(comb) > 0:
 Xsel = []
 for patient in Xall:
 Xsel.append([patient[ind] for ind in comb])
 this_scores = cross_val_score(model, Xsel, y=yall, cv=3 )
 score_mean = np.mean(this_scores)
 score_std = np.std(this_scores)
 comb1 = list(comb)
 if intercept: comb1.append(nfeatures)
 if len(best_score) > 0:
 if score_mean > best_score[0]:
 best_score = []
 best_std = []
 best_comb = []
 best_score.append(score_mean)
 best_std.append(score_std)
 best_comb.append(comb1)
 elif score_mean == best_score[0]:
 best_score.append(score_mean)
 best_std.append(score_std)
 best_comb.append(comb1)
 else:
 best_score.append(score_mean)
 best_std.append(score_std)
 best_comb.append(comb1)
new_columns_3 = new_columns_2[1:]
new_columns_3.append("intercept")
num_ties = len(best_score)
for ind in range(num_ties):
 comb1 = best_comb[ind][:]
 if nfeatures in comb1:
 intercept = True
 comb1.remove(nfeatures)
 else:
 intercept = False
 model = LogisticRegression(fit_intercept=intercept,penalty=penalty,dual=False,C=cval)
 Xsel = []
 for patient in Xall:
 Xsel.append([patient[i] for i in comb1])
 lrfit = model.fit(Xsel,yall)
 print('\nResults for combination %s:' %best_comb[ind])
 print('LogisticRegression score on full data set: %f' % lrfit.score(Xsel,yall))
 print('LogisticRegression score from cross-validation: %f +/- %f' %
(best_score[ind],best_std[ind]))
 print('LogisticRegression coefficients:')
 coeff = model.coef_.tolist()[0]
 if intercept: coeff.append(model.intercept_)
 for jnd in range(len(coeff)):
 print '%s : %8.5f' % (new_columns_3[best_comb[ind][jnd]].rjust(9),coeff[jnd])
